x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
summary(x)
sd(x)
??scaled
??scale
??scaled
scale(x)
sd(scale(x))
mean(scale(x))
y <- scale(x)
mean(y)
y
mean(x)
x{1}
x[1]
x[1]-mean(x)
x[1]-mean(x)/sd(x)
x[1]-mean(x)/sqrt(sd(x))
x[1]-mean(x)/sqrt(sd(x))/2
x[1]-mean(x)/(sd(x))^2
x[1]-mean(x)/sqrt(sd(x))
x[1]-mean(x)/sqrt(sd(x))*2
x[1]-mean(x)/sqrt(sd(x))/2
x[1]-mean(x)/(sqrt(sd(x)))/2
x[1]-mean(x)/(sqrt(sd(x)))*2
(x[1]-mean(x))/(sqrt(sd(x)))*2
(x[1]-mean(x))/(sqrt(sd(x))
)
(x[1]-mean(x))/(sqrt(sd(x)))
(x[1]-mean(x))/(sqrt(sd(x)/2))
(x[1]-mean(x))/(sqrt(sd(x)*2))
(x[1]-mean(x))/(sqrt(sd(x)))
(x[1]-mean(x))/(sd(x))^2
(x[1]-mean(x))/(sd(x))^2/2
(x[1]-mean(x))/var(x)
var(x)
sd(x)
sqrt(var(x))
(x[1]-mean(x))/sd(x)
(x[1]-mean(x))/sd(x)
(x-mean(x))/sd(x)
y <- (x-mean(x))/sd(x)
mean(y)
sd(y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
lm(x ~ y)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm( y ~ x)
mean (x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
cor(y,x)
cor(x,y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
lm(y ~ x - 1)
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(all ~ ., swiss)
lm(. ~ all, swiss)
?lm
skip()
summary(all)
skip()
quit()
quit()
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), 1.5 + runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 0; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ wt | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2]) +
#Method 2
geom_smooth(method = "lm",se = FALSE,aes(group = 1))
library("ggplot2", lib.loc="~/R/win-library/3.1")
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2]) +
#Method 2
geom_smooth(method = "lm",se = FALSE,aes(group = 1))
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2], lwd = 3) +
#Method 2
geom_smooth(method = "lm",se = FALSE,aes(group = 1))
qplot(am, mpg, data = mtcars) +
#Method 1
# geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2], lwd = 3) +
#Method 2
geom_smooth(method = "lm",se = FALSE,aes(group = 1))
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2], lwd = 3)
#Method 2
# geom_smooth(method = "lm",se = FALSE,aes(group = 1))
fit <- lm(mpg ~ am, mtcars)
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2], lwd = 3)
#Method 2
# geom_smooth(method = "lm",se = FALSE,aes(group = 1))
fit <- lm(mpg ~ am, mtcars)
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2], lwd = 3) +
#Method 2
geom_smooth(method = "lm",se = FALSE,aes(group = 1))
fit <- lm(mpg ~ factor(am), mtcars)
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2], lwd = 3) +
#Method 2
geom_smooth(method = "lm",se = FALSE,aes(group = 1))
fit <- lm(mpg ~ am, data = mtcars)
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2], lwd = 3) +
#Method 2
geom_smooth(method = "lm",se = FALSE,aes(group = 1))
fit <- lm(mpg ~ am, data = mtcars)
qplot(am, mpg, data = mtcars) +
#Method 1
geom_abline(intercept = fit$coef[1] - fit$coef[2], slope = fit$coef[2], lwd = 3) +
#Method 2
geom_smooth(method = "lm",se = FALSE,aes(group = 1))
fit <- lm(mpg ~ as.factor(am), data = mtcars)
summary(fit)
fit <- lm(mpg ~ as.factor(am) + wt, data = mtcars)
summary(fit)
plot(fit)
plot(fit)
fit <- lm(mpg ~ as.factor(am), data = mtcars)
plot(fit)
?step
?anova
# First we convert the am as factor data
mtcars$am <- as.factor(mtcars$am)
# by ?mtcars, we can see the following information
# [,9]   am  Transmission (0 = automatic, 1 = manual)
levels(mtcars$am) <-c("Automatic", "Manual")
pairs(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
lm(mpg~cyl, data =mtcars)
lm(mpg~cyl + wt, data =mtcars)
plot(lm(mpg~cyl + wt, data =mtcars))
qplot(cyl, mpg, wt, data = mtcars)
qplot(cyl, mpg, data = mtcars)
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of cylinders", ylab = "mpg",
main = "MTCARS data", varwidth = TRUE, col = "lightgray")
plot(lm(mpg~cyl, data =mtcars))
lm(mpg~cyl, data =mtcars)
lm(mpg~cyl + wt, data =mtcars)
lm(mpg~ I(wt * 0.5) + cyl , data =mtcars)
lm(mpg~ wt + cyl , data =mtcars)
lm(mpg~ cyl + wt , data =mtcars)
lm(mpg~ cyl , data =mtcars)
lm(mpg~ cyl + wt , data =mtcars)
lm(mpg~ I(wt * 0.5) + cyl , data =mtcars)
qplot(cyl, mpg, data = mtcars)
lm(mpg~cyl + wt, data =mtcars)
lm(mpg~ wt + cyl , data =mtcars)
lm(mpg~cyl + wt, data =mtcars)
lm(mpg~ wt, data =mtcars)
qplot(wt, mpg, data = mtcars)
qplot(wt*.5, mpg, data = mtcars)
lm(mpg~ I(wt * 0.5) + am , data =mtcars)
qplot(am, mpg, data = mtcars)
fit1 <- lm(mpg~ cyl , data =mtcars)
ggplotRegression(fit1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
opts(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(fit1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
theme (title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(fit1)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
source('~/TSM Stats/fsattime.R', echo=TRUE)
source('~/TSM Stats/buildsamples2.R', echo=TRUE)
test <- buildsamples(10, 20)
qplot (test)
library(ggplot2)
qplot(test)
view(test)
View(test)
rnorm(3, mean = 0, sd = 3)
rnorm(3, mean = 0, sd = 3)
rnorm(3, mean = 0, sd = 2)
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~ carat, data = diamond)
coef(fit)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
? fit
??fit
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
points(diamond$carat, predict(fit), pch = 19, col = "red")
lines(c(0.16, 0.16, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.16,
coef(fit)[1] + coef(fit)[2] * 0.16))
lines(c(0.27, 0.27, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.27,
coef(fit)[1] + coef(fit)[2] * 0.27))
lines(c(0.34, 0.34, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.34,
coef(fit)[1] + coef(fit)[2] * 0.34))
text(newx, rep(250, 3), labels = newx, pos = 2)
newx <- c(0.16, 0.27, 0.34)
newdata = data.frame(carat = newx)
coef(fit)
summary(fit)
newclient_id <- c("100", "200", "300")
newclient = data.frame(client_id = newclient_id)
sample(1:10)
??sample
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"))
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
L3 <- LETTERS[1:3]
paste0 (L3, seq(1:10))
paste0 (sample(LETTERS[1:3], replace = TRUE, seq(1:10)))
paste0 (sample(LETTERS[1:3], size = 10, replace = TRUE, seq(1:10)))
paste0 (sample(LETTERS[1:3], replace = TRUE), seq(1:10))
paste0 (sample(LETTERS[1:3], replace = TRUE), seq(1:100))
paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:100))
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class = 5
class_id_select = srsdf(dfclass_id,no_class,replace=FALSE,vars=c("class_id"))
no_node = 100
dfnode_id = data.frame (node_id = paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:no_node)), class_id = )
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class = 5
class_id_select = sample(dfclass_id$class_id, no_class)
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class = 1
class_id_select = sample(dfclass_id$class_id, size = no_class)
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class = 1
? class_id_select
print class_id_select
sample(dfclass_id$class_id, size = no_class)
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class = 3
class_id_select = sample(dfclass_id$class_id, size = no_class)
sample(dfclass_id$class_id, size = no_class)
sample(dfclass_id$class_id, size = no_class)
sample(dfclass_id$class_id, size = no_class)
sample(dfclass_id$class_id, size = no_class)
sample(dfclass_id$class_id, size = no_class)
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class = 3
class_id_select = sample(dfclass_id$class_id, size = no_class)
no_node = 100
dfnode_id = data.frame (node_id = paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:no_node)), class_id = sample(class_id_select))
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class = 3
class_id_select = sample(dfclass_id$class_id, size = no_class)
no_node = 100
dfnode_id = data.frame (node_id = paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:no_node)), class_id = sample(class_id_select, size =100, replace = TRUE))
View(dfnode_id)
install.packages("shiny")
library(shiny)
setwd("~/TSM Stats")
runApp("App-1", display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
jitter (c(1.0))
jitter (c(1.0))
jitter (c(1.0))
jitter (c(1.0))
jitter (c(1.0))
shiny::runApp()
shiny::runApp()
summary (dfnode_id)
combinedData <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
library(plyr)
combinedData <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
dfnode_id <- data.frame (node_id = paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:input$no_node)),
class_id = sample(sample(dfclass_id$class_id, size = input$no_class), size = input$no_node, replace = TRUE))
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample1'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample2'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample3'
dfnode_id
dfnode_id <- data.frame (node_id = paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:input$no_node)),
class_id = sample(sample(dfclass_id$class_id, size = input$no_class), size = input$no_node, replace = TRUE))
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample1'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample2'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample3'
dfnode_id$sample1 <- with( dfnode_id , jitter(sample1) )
dfnode_id
dfnode_id <- NULL
dfnode_id <- data.frame (node_id = paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:input$no_node)),
class_id = sample(sample(dfclass_id$class_id, size = input$no_class), size = input$no_node, replace = TRUE))
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample1'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample2'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample3'
dfnode_id$sample1 <- with( dfnode_id , jitter(sample1) )
dfnode_id$sample2 <- with( dfnode_id , jitter(sample2) )
dfnode_id$sample3 <- with( dfnode_id , jitter(sample3) )
dfnode_id
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(cluster)
library(fpc)
data(iris)
dat <- iris[, -5] # without known classification
# Kmeans clustre analysis
clus <- kmeans(dat, centers=3)
# Fig 01
plotcluster(dat, clus$cluster)
library(cluster)
library(fpc)
data(iris)
dat <- iris[, -5] # without known classification
# Kmeans clustre analysis
clus <- kmeans(dat, centers=3)
# Fig 01
plot(dat, clus$cluster)
iris
selectedData <- (
iris[, c("input$xcol"Sepal.Length, Petal.Length)]
)
selectedData <- (
iris[, c("Sepal.Length", "Petal.Length")]
)
selectedData <- iris[, c("Sepal.Length", "Petal.Length")]
selectedData <- iris[, c("Sepal.Length", "Petal.Length")]
input$clusters <- 3
clusters <- kmeans(selectedData(), input$clusters)
selectedData <- iris[, c("Sepal.Length", "Petal.Length")]
input$clusters <- 3
clusters <- kmeans(selectedData, input$clusters)
selectedData <- iris[, c("Sepal.Length", "Petal.Length")]
cluster_no <- 3
clusters <- kmeans(selectedData, cluster_no)
plot(selectedData,
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
plot(selectedData,
col = clusters$cluster,
pch = 20, cex = 3)
points(clusters$centers, pch = 4, cex = 4, lwd = 4)
shiny::runApp()
rnorm(3, mean = 0, sd = 2)
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class <- 3
no_node <- 50
dfnode_id <- data.frame (node_id = paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:no_node)),
class_id = sample(sample(dfclass_id$class_id, size = no_class), size = no_node, replace = TRUE))
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample1'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample2'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample3'
dfnode_id$sample1 <- with( dfnode_id , jitter(sample1) )
dfnode_id$sample2 <- with( dfnode_id , jitter(sample2) )
dfnode_id$sample3 <- with( dfnode_id , jitter(sample3) )
dfnode_id$ratio <- with( dfnode_id , (sample1+sample2+sample3)/3.00 )
dfnode_id
clusters <- function({
kmeans(dfnode_id[, c("ratio", "ratio")], no_class)
})
dfclass_id = data.frame (class_id = c("AA", "AB", "AC", "BA", "BB", "BC"), ratio = c(2.5, 3.0, 1.5, 2.0, 4.0, 2.2))
no_class <- 3
no_node <- 50
dfnode_id <- data.frame (node_id = paste0 (sample(LETTERS[1:10], replace = TRUE), seq(1:no_node)),
class_id = sample(sample(dfclass_id$class_id, size = no_class), size = no_node, replace = TRUE))
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample1'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample2'
dfnode_id <- join(dfnode_id, dfclass_id, by='class_id', type='left', match='all')
colnames(dfnode_id)[which(colnames(dfnode_id) == 'ratio')] <- 'sample3'
dfnode_id$sample1 <- with( dfnode_id , jitter(sample1) )
dfnode_id$sample2 <- with( dfnode_id , jitter(sample2) )
dfnode_id$sample3 <- with( dfnode_id , jitter(sample3) )
dfnode_id$ratio <- with( dfnode_id , (sample1+sample2+sample3)/3.00 )
dfnode_id
clusters <- kmeans(dfnode_id[, c("ratio", "class_id")], no_class)
clusters <- kmeans(dfnode_id[, c("ratio", "ratio")], no_class)
plot(dfnode_id[, c("ratio", "ratio")],
col = clusters$cluster,
pch = 20, cex = 3)
points(clusters$centers, pch = 4, cex = 4, lwd = 4)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/devdataprod")
shiny::runApp()
